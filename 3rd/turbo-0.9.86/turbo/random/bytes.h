// Copyright 2023 The Elastic-AI Authors.
// part of Elastic AI Search
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#ifndef TURBO_RANDOM_BYTES_H_
#define TURBO_RANDOM_BYTES_H_

#include "turbo/random/uniform.h"

namespace turbo {

    /**
     * @ingroup turbo_random_bytes
     * @brief turbo::random_bytes(urbg, output, output_length) fills the range [output, output + output_length) with
     *        uniformly distributed random bytes. `output` must be a pointer to a range of at least `output_length`
     *        bytes. `urbg` must be a uniform random bit generator.
     *        See https://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution.
     *
     *        Example:
     *        @code cpp
     *        turbo::BitGen bitgen;
     *        ...
     *        std::vector<uint8_t> bytes(100);
     *        turbo::random_bytes(bitgen, bytes.data(), bytes.size());
     *        @endcode
     * @tparam URBG
     * @param urbg
     * @param output
     * @param output_length
     */
    template<typename URBG>
    inline void random_bytes(URBG &&urbg, void *output, size_t output_length) {
        const size_t n = output_length / 8;
        for (size_t i = 0; i < n; ++i) {
            static_cast<uint64_t *>(output)[i] = uniform(urbg);
        }
        const size_t m = output_length - n * 8;
        if (m) {
            uint8_t *p = static_cast<uint8_t *>(output) + n * 8;
            uint64_t r = uniform(urbg);
            for (size_t i = 0; i < m; ++i) {
                p[i] = (r & 0xFF);
                r = (r >> 8);
            }
        }
    }

    /**
     * @ingroup turbo_random_bytes
     * @brief  similar to turbo::random_bytes(urbg, output, output_length), but uses the default thread-local
     *         bit generator.
     * @note  the default bitgen is thread_local. so it is thread safe.
     * @see   turbo::get_tls_bit_gen()
     * @see   turbo::set_tls_bit_gen()
     * @param output
     * @param output_length
     */
    inline void random_bytes(void *output, size_t output_length) {
        const size_t n = output_length / 8;
        for (size_t i = 0; i < n; ++i) {
            static_cast<uint64_t *>(output)[i] = uniform<uint64_t>();
        }
        const size_t m = output_length - n * 8;
        if (m) {
            uint8_t *p = static_cast<uint8_t *>(output) + n * 8;
            uint64_t r = uniform<uint64_t>();
            for (size_t i = 0; i < m; ++i) {
                p[i] = (r & 0xFF);
                r = (r >> 8);
            }
        }
    }

    /**
     * @ingroup turbo_random_bytes
     * @brief  similar to turbo::random_bytes(urbg, output, output_length), but uses the fast thread-local
     *         bit generator.
     * @note  the fast bitgen is thread_local. so it is thread safe.
     * @see   turbo::get_tls_fast_bit_gen()
     * @see   turbo::set_tls_fast_bit_gen()
     * @param output
     * @param output_length
     */
    inline void fast_random_bytes(void *output, size_t output_length) {
        const size_t n = output_length / 8;
        for (size_t i = 0; i < n; ++i) {
            static_cast<uint64_t *>(output)[i] = fast_uniform<uint64_t>();
        }
        const size_t m = output_length - n * 8;
        if (m) {
            uint8_t *p = static_cast<uint8_t *>(output) + n * 8;
            uint64_t r = fast_uniform<uint64_t>();
            for (size_t i = 0; i < m; ++i) {
                p[i] = (r & 0xFF);
                r = (r >> 8);
            }
        }
    }

    /**
     * @ingroup turbo_random_bytes
     * @brief turbo::random_bytes(output, output_length) fills the range [output, output + output_length) with
     *        uniformly distributed random bytes. `output` must be a pointer to a range of at least `output_length`
     *        bytes. the generated bytes are printable.
     * @param output the output buffer
     * @param output_length
     */
    template<typename URBG>
    std::string random_printable(URBG &&urbg, size_t length) {
        std::string result(length, 0);
        const size_t halflen = length / 2;
        random_bytes(urbg, &result[0], halflen);
        for (size_t i = 0; i < halflen; ++i) {
            const uint8_t b = result[halflen - 1 - i];
            result[length - 1 - 2 * i] = 'A' + (b & 0xF);
            result[length - 2 - 2 * i] = 'A' + (b >> 4);
        }
        if (halflen * 2 != length) {
            result[0] = 'A' + (uniform<uint64_t>(urbg) % 16);
        }
        return result;
    }

    /**
     * @ingroup turbo_random_bytes
     * @brief  similar to turbo::random_printable(urbg, output, output_length), but uses the default thread-local
     *         bit generator.
     * @note  the default bitgen is thread_local. so it is thread safe.
     * @see   turbo::get_tls_bit_gen()
     * @see   turbo::set_tls_bit_gen()
     * @param output
     * @param output_length
     */
    inline std::string random_printable(size_t length);

    /**
     * @ingroup turbo_random_bytes
     * @brief  similar to turbo::random_printable(urbg, output, output_length), but uses the fast thread-local
     *         bit generator.
     * @note  the fast bitgen is thread_local. so it is thread safe.
     * @see   turbo::get_tls_fast_bit_gen()
     * @see   turbo::set_tls_fast_bit_gen()
     * @param output
     * @param output_length
     */
    std::string fast_random_printable(size_t length);

}  // namespace turbo

#endif  // TURBO_RANDOM_BYTES_H_
