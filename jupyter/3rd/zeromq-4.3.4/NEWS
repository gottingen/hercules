0MQ version 4.3.4 stable, released on 2020/01/17
================================================

* New DRAFT (see NEWS for 4.2.0) socket option:
  - ZMQ_PRIORITY will set the SO_PRIORITY socket option on the underlying
    sockets. Only supported on Linux.
  See doc/zmq_setsockopt.txt and doc/zmq_getsockopt.txt for details.

* Fixed #4113 - compilation errors on kFreeBSD and GNU/Hurd

* Fixed #4086 - excessive amount of socket files left behind in Windows TMP
                directory

* Fixed #4108 - regression that breaks using IPv6 link-local addresses on Linux

* Fixed #4078 - compilation errors on Android

* Fixed #4074 - compilation error with ulibc and libbsd

* Fixed #4060 - stack overflow on Windows x64

* Fixed #4051 - various compilation errors on Windows ARM 32bit

* Fixed #4043 - various compilation warnings with XCode

* Fixed #4038 - return value of zmq_ctx_get changed unintentionally


0MQ version 4.3.3 stable, released on 2020/09/07
================================================

* Security advisories:
  * CVE-2020-15166: Denial-of-Service on CURVE/ZAP-protected servers by
    unauthenticated clients.
    If a raw TCP socket is opened and connected to an endpoint that is fully
    configured with CURVE/ZAP, legitimate clients will not be able to exchange
    any message. Handshakes complete successfully, and messages are delivered to
    the library, but the server application never receives them.
    For more information see the security advisory:
    https://github.com/zeromq/libzmq/security/advisories/GHSA-25wp-cf8g-938m
  * Stack overflow on server running PUB/XPUB socket (CURVE disabled).
    The PUB/XPUB subscription store (mtrie) is traversed using recursive
    function calls. In the remove (unsubscription) case, the recursive calls are
    NOT tail calls, so even with optimizations the stack grows linearly with the
    length of a subscription topic. Topics are under the control of remote
    clients - they can send a subscription to arbitrary length topics. An
    attacker can thus cause a server to create an mtrie sufficiently large such
    that, when unsubscribing, traversal will cause a stack overflow.
    For more information see the security advisory:
    https://github.com/zeromq/libzmq/security/advisories/GHSA-qq65-x72m-9wr8
  * Memory leak in PUB server induced by malicious client(s) without CURVE/ZAP.
    Messages with metadata are never processed by PUB sockets, but the metadata
    is kept referenced in the PUB object and never freed.
    For more information see the security advisory:
    https://github.com/zeromq/libzmq/security/advisories/GHSA-4p5v-h92w-6wxw
  * Memory leak in client induced by malicious server(s) without CURVE/ZAP.
    When a pipe processes a delimiter and is already not in active state but
    still has an unfinished message, the message is leaked.
    For more information see the security advisory:
    https://github.com/zeromq/libzmq/security/advisories/GHSA-wfr2-29gj-5w87
  * Heap overflow when receiving malformed ZMTP v1 packets (CURVE disabled).
    By crafting a packet which is not valid ZMTP v2/v3, and which has two
    messages larger than 8192 bytes, the decoder can be tricked into changing
    the recorded size of the 8192 bytes static buffer, which then gets overflown
    by the next message. The content that gets written in the overflown memory
    is entirely decided by the sender.
    For more information see the security advisory:
    https://github.com/zeromq/libzmq/security/advisories/GHSA-fc3w-qxf5-7hp6

* Note for packagers: an external, self-contained sha1 library is now
  included in the source tree under external/sha1/ - it is licensed
  under BSD-3-Clause and thus it is fully compatible with libzmq's
  license.
  It is only used if WebSockets support is enabled, and if neither GnuTLS nor
  NSS are available.

* Note for packagers: an internal reimplementation of strlcpy is now included,
  for wider platform compatibility.
  libbsd can be used and is enabled by default if available instead of the
  internal implementation, for better security maintenance in distros.

* Note for packagers: ZeroMQConfig.cmake is now installed in the arch-dependent
  subdirectory - eg: /usr/lib/x86_64-linux-gnu/cmake/

* New DRAFT (see NEWS for 4.2.0) socket type:
  - ZMQ_CHANNEL is a thread-safe alternative to ZMQ_PAIR.
  See doc/zmq_socket.txt for details.

* New DRAFT (see NEWS for 4.2.0) socket option:
  - ZMQ_ONLY_FIRST_SUBSCRIBE will cause only the first part of a multipart
    message to be processed as a subscribe/unsubscribe message, and the rest
    will be forwarded as user data to the application.
  - ZMQ_RECONNECT_STOP will cause a connecting socket to stop trying to
    reconnect in specific circumstances. See the manpage for details.
  - ZMQ_HELLO_MSG to set a message that will be automatically sent to a new
    connection.
  - ZMQ_DISCONNECT_MSG to set a message that will be automatically received when
    a peer disconnects.
  See doc/zmq_setsockopt.txt and doc/zmq_getsockopt.txt for details.

* New DRAFT (see NEWS for 4.2.0) zmq_ctx_get_ext/zmq_ctx_set_ext APIs were added
  to allow enhancing the context options with variable data inputs.
  See doc/zmq_ctx_get_ext.txt and doc/zmq_ctx_set_ext.txt for details.

* New DRAFT (see NEWS for 4.2.0) transport options WS and WSS added for support
  of WebSockets (and secure WebSockets via TLS) via the ZWS 2.0 protocol.
  WSS requires the GnuTLS library for TLS support. ZMQ_WSS_ specific socket
  options were added to support TLS.
  WebSockets support is disabled by default if DRAFT APIs are disabled.

* New DRAFT (see NEWS for 4.2.0) socket type, PEER, which is thread safe and a
  related zmq_connect_peer function which atomically and thread-safely connects
  and returns a routing-id.

* New DRAFT (see NEWS for 4.2.0) zmq_msg_init_buffer API was added to allow
  the construction of a message by copying from an existing buffer.

* New DRAFT (see NEWS for 4.2.0) zmq_poller_size API was added to allow querying
  the number of sockets/fds registered in a zmq_poller.

* ZMTP 3.1 peers will receive subscribe/cancel on PUB/SUB via commands rather
  than using the first byte of the payload.

* zmq_z85_decode now checks that the input string's length is at least 5 characters
  and always a multiple of 5 as per API specification.

* Fixed #3566 - malformed CURVE message can cause memory leak

* Fixed #3567 - missing ZeroMQ_INCLUDE_DIR in ZeroMQConfig.cmake when only
                static lib is built

* Fixed #3576 - CURVE plaintext secrets now stored in libsodium's secure memory

* Fixed #3588 - install debug libraries for debug msvc builds with CMake

* Fixed #3591 - incorrect ZMQ_MAX_SOCKETS default value in doc

* Fixed #3594 - fixed stream_engine use after free due to concurrent heartbeats

* Fixed #3586 - error when compiling with MinGW due to usage of MS-specific
                __except keyword

* Fixed #3603 - fixed CMake build on SL6.9

* Fixed #3607 - added scripts to ease performance graph generation

* Fixed #3608 - fix for IPv4 mapping not supported in DragonFlyBSD

* Fixed #3636 - added ENABLE_PRECOMPILED CMake option to fix build with Ninja

* Fixed #2862 - UDP engine aborts on networking-related errors from socket
                syscalls

* Fixed #3656 - segfault on sending data from XSUB to XPUB

* Fixed #3646 - static-only test run fails

* Fixed #3668 - fixed CMAKE_CXX_FLAGS_* regexes on MSVC

* Fixed #110  - do not include winsock2.h in public zmq.h header

* Fixed #3683 - allow "configure --disable-maintainer-mode"

* Fixed #3686 - fix documentation about sockets blocking on send operations

* Fixed #3323 - fix behavior of ZMQ_CONFLATE on PUB sockets

* Fixed #3698 - fix build on IBM i/PASE/os400

* Fixed #3705 - zero-sized messages cause assertion when glibc assertion are on

* Fixed #3713 - remove dependency on math library by avoiding std::ceil

* Fixed #3694 - build targeting Windows XP is broken

* Fixed #3691 - added support for IPC on Windows 10 via AF_UNIX

* Fixed #3725 - disable by default test that requires sudo on CMake

* Fixed #3727 - fix zmq_poller documentation example

* Fixed #3729 - do not check for FD_OOB when using WSAEventSelect on Windows

* Fixed #3738 - allow renaming the library in CMake

* Fixed #1808 - use AF_UNIX instead of TCP for the internal socket on Windows 10

* Fixed #3758 - fix pthread_set_affinity detection in CMake

* Fixed #3769 - fix undefined behaviour in array.hpp

* Fixed #3772 - fix compiling under msys2-mingw

* Fixed #3775 - add -latomic to the private libs flag in pkg-config if needed

* Fixed #3778 - fix documentation of zmq_poller's thread safety

* Fixed #3792 - do not allow creation of new sockets after zmq_ctx_shutdown

* Fixed #3805 - improve performance of CURVE by reducing copies

* Fixed #3814 - send subscribe/cancel as commands to ZMTP 3.1 peers

* Fixed #3847 - fix building without PGM and NORM

* Fixed #3849 - install .cmake file in arch-dependent subdirectory

* Fixed #4005 - allow building on Windows ARM/ARM64

0MQ version 4.3.2 stable, released on 2019/07/08
================================================

* CVE-2019-13132: a remote, unauthenticated client connecting to a
  libzmq application, running with a socket listening with CURVE
  encryption/authentication enabled, may cause a stack overflow and
  overwrite the stack with arbitrary data, due to a buffer overflow in
  the library. Users running public servers with the above configuration
  are highly encouraged to upgrade as soon as possible, as there are no
  known mitigations. All versions from 4.0.0 and upwards are affected.
  Thank you Fang-Pen Lin for finding the issue and reporting it!

* New DRAFT (see NEWS for 4.2.0) zmq_socket_monitor_versioned API that supports
  a versioned monitoring events protocol as a parameter. Passing 1 results in
  the same behaviour as zmq_socket_monitor.
  Version 2 of the events protocol allows new events, new metadata, different
  socket types for the monitors and more. It is described in details in
  doc/zmq_socket_monitor_versioned.txt

* New DRAFT (see NEWS for 4.2.0) zmq_socket_monitor_pipes_stats that triggers
  a new ZMQ_EVENT_PIPES_STATS to be delivered via zmq_socket_monitor_versioned
  v2 API, which contains the current status of all the queues owned by the
  monitored socket. See doc/zmq_socket_monitor_versioned.txt for details.

* New DRAFT (see NEWS for 4.2.0) zmq_poller_fd that returns the FD of a thread
  safe socket. See doc/zmq_poller.txt for details.

* New DRAFT (see NEWS for 4.2.0) socket options:
  - ZMQ_XPUB_MANUAL_LAST_VALUE is similar to ZMQ_XPUB_MANUAL but allows to avoid
    duplicates when using last value caching.
  - ZMQ_SOCKS_USERNAME and ZMQ_SOCKS_PASSWORD that implement SOCKS5 proxy
    authentication.
  See doc/zmq_setsockopt.txt and doc/zmq_getsockopt.txt for details.

* Implemented background thread names for Windows, when the Visual Studio
  debugger is being used.

* Fixed #3358 - test_security_zap failing due to SIGBUS on SPARC64, hard-coded
                IPC socket binds in tests cause race conditions

* Fixed #3361 - enabling GSSAPI support (when using autools) does not work due
                to regression introduced in 4.2.3

* Fixed #3362 - remove documentation for ZMQ_THREAD_PRIORITY context option
                getter, it's not implemented

* Fixed #3363 - tests fail to build due to stricter compiler printf validation
                in new versions of GCC

* Fixed #3367 - try to infer cacheline size at build time, first with
                getconf LEVEL1_DCACHE_LINESIZE, and then by reading
                /sys/devices/system/cpu/cpu0/cache/index0/coherency_line_size
                (autoconf only), and only then falling back to the previous
                default of 64 bytes. Avoids false sharing on POWER and s390x.
                Import ax_func_posix_memalign.m4 as a more reliable check for
                posix_memalign presence on some unix platforms.
                Prefer c++11 atomic primitives to compiler intrinsics, when
                both are available, as the former is more reliable.
                Set test_pair_ipc and test_rebind_ipc to XFAIL on GNU/Hurd due
                to non-functioning getsockname on AF_UNIX.

* Fixed #3370 - Make queue length and HWM state observable

* Fixed #3373 - performance regression in zmq_poll on CentOS 6/7

* Fixed #3375 - assign names to all pthreads created by the library to ease
                debugging

* Fixed #3376 - assigned random TIPC port is not returned by ZMQ_LAST_ENDPOINT

* Fixed #3385 - TCP port in ZMQ_LAST_ENDPOINT depends on global locale

* Fixed #3404 - use std::condition_variable_any when possible

* Fixed #3436 - reconnect interval exponential backoff and may lead to integer
                overflows

* Fixed #3440 - improve zmq_proxy performance by batching of up to 1000
                consecutive messages (if any) and add perf/proxy_thr tool

* Fixed #3451 - fix support of /dev/poll on Solaris

* Fixed #3452 - strnlen may not be available

* Fixed #1462 - test failure in test_filter_ipc due to invalid system groups

* Fixed #3269 - Boost.ASIO integration stopped working with v4.3.0

* Fixed #3479 - ZeroMQ does not build for QNX 6.6 with CMake

* Fixed #3481 - add <ios> include to fix uClibc++ compilation

* Fixed #3491 - build broken on Fedora 30

* Fixed #3494 - ZeroMQConfig.cmake fails if shared libraries are not built

* Fixed #3498 - syntax error on Windows related to socket descriptor type

* Fixed #3500 - PLAIN HELLO message incorrectly uses WELCOME literal, regression
                introduced in 4.3.0

* Fixed #3517 - configure errors because of syntax errors in the use of test
                shell command

* Fixed #3521 - document how to achieve high performance with the PGM transport

* Fixed #3526 - failure case behavior unclear in zmq_msg_send documentation

* Fixed #3537 - fix build on z/OS by using pthread_equal instead of comparing
                variables directly

* Fixed #3546 - CMake links with librt on MinGW which is not available

* Many coding style, duplication, testing and static analysis improvements.


0MQ version 4.3.1 stable, released on 2019/01/12
================================================

* CVE-2019-6250: A vulnerability has been found that would allow attackers to
  direct a peer to jump to and execute from an address indicated by the
  attacker.
  This issue has been present since v4.2.0. Older releases are not affected.
  NOTE: The attacker needs to know in advance valid addresses in the peer's
  memory to jump to, so measures like ASLR are effective mitigations.
  NOTE: this attack can only take place after authentication, so peers behind
  CURVE/GSSAPI are not vulnerable to unauthenticated attackers.
  See https://github.com/zeromq/libzmq/issues/3351 for more details.
  Thanks to Guido Vranken for uncovering the issue and providing the fix!

* Note for packagers: as pkg-config's Requires.private is now used to properly
  propagate dependencies for static builds, the libzmq*-dev or zeromq-devel or
  equivalent package should now depend on the libfoo-dev or foo-devel packages
  of all the libraries that zmq is linked against, or pkg-config --libs libzmq
  will fail due to missing dependencies on end users machines.

* Fixed #3351 - remote code execution vulnerability.

* Fixed #3343 - race condition in ZMQ_PUSH when quickly disconnecting and
                reconnecting causes last part of multi-part message to get
                "stuck" and resent by mistake to the new socket.

* Fixed #3336 - set Requires.private in generate pkg-config file.

* Fixed #3334 - set TCP_NODELAY after connect() on Windows for the I/O socket.

* Fixed #3326 - assert on Android when opening a socket and disabling WiFi.

* Fixed #3320 - build failure on OpenBSD with GCC.

0MQ version 4.3.0 stable, released on 2018/11/28
================================================

* The following DRAFT APIs have been marked as STABLE and will not change
  anymore:
  - ZMQ_MSG_T_SIZE context option (see doc/zmq_ctx_get.txt)
  - ZMQ_THREAD_AFFINITY_CPU_ADD and ZMQ_THREAD_AFFINITY_CPU_REMOVE (Posix only)
    context options, to add/remove CPUs to the affinity set of the I/O threads.
    See doc/zmq_ctx_set.txt and doc/zmq_ctx_get.txt for details.
  - ZMQ_THREAD_NAME_PREFIX (Posix only) context option, to add a specific
    integer prefix to the background threads names, to easily identify them.
    See doc/zmq_ctx_set.txt and doc/zmq_ctx_get.txt for details.
  - ZMQ_GSSAPI_PRINCIPAL_NAMETYPE and ZMQ_GSSAPI_SERVICE_PRINCIPAL_NAMETYPE
    socket options, for the corresponding GSSAPI features. Additional
    definitions for principal name types:
    - ZMQ_GSSAPI_NT_HOSTBASED
    - ZMQ_GSSAPI_NT_USER_NAME
    - ZMQ_GSSAPI_NT_KRB5_PRINCIPAL
    See doc/zmq_gssapi.txt for details.
  - ZMQ_BINDTODEVICE socket option (Linux only), which will bind the
    socket(s) to the specified interface. Allows to use Linux VRF, see:
    https://www.kernel.org/doc/Documentation/networking/vrf.txt
    NOTE: requires the program to be ran as root OR with CAP_NET_RAW
  - zmq_timers_* APIs. These functions can be used for cross-platforms timed
    callbacks. See doc/zmq_timers.txt for details.
  - The following socket monitor events:
    - ZMQ_EVENT_HANDSHAKE_FAILED_NO_DETAIL: unknown errors during handshake.
    - ZMQ_EVENT_HANDSHAKE_SUCCEEDED: Handshake completed with authentication.
    - ZMQ_EVENT_HANDSHAKE_FAILED_PROTOCOL: Protocol errors with peers or ZAP.
    - ZMQ_EVENT_HANDSHAKE_FAILED_AUTH: Failed authentication requests.
    See doc/zmq_socket_monitor.txt for more details and error codes.
  - zmq_stopwatch_intermediate which returns the time elapsed without stopping
    the stopwatch.
  - zmq_proxy_steerable command 'STATISTICS' to retrieve stats about the amount
    of messages and bytes sent and received by the proxy.
    See doc/zmq_proxy_steerable.txt for more information.

* The build-time configuration option to select the poller has been split, and
  new API_POLLER (CMake) and --with-api-poller (autoconf) options will now
  determine what system call is used to implement the zmq_poll/zmq_poller APIs.
  The previous POLLER and --with-poller options now only affects the
  internal I/O thread. In case API_POLLER is not specified, the behaviour keeps
  backward compatibility intact and will be the same as with previous releases.

* The non-default "poll" poller for the internal I/O thread (note: NOT for the
  zmq_poll/zmq_poller user APIs!) has been disabled on Windows as WSAPoll does
  not report connection failures. For more information see:
  - https://daniel.haxx.se/blog/2012/10/10/wsapoll-is-broken/
  - https://curl.haxx.se/mail/lib-2012-10/0038.html
  - https://bugs.python.org/issue16507

* New epoll implementation for Windows, using the following implementation:
  https://github.com/piscisaureus/wepoll/tree/v1.5.4
  To use this, select "epoll" as the poller option in the build system.
  Note for distributors: the wepoll source code is embedded and distributed.
  It is licensed under the BSD-2-Clause and thus it is compatible with LGPL-3.0.
  Note that, if selected at build time, the license text must be distributed
  with the binary in accordance to the license terms. A copy can be found at:
  external/wepoll/license.txt

* The pre-made Visual Studio solutions file are deprecated, and users are
  encouraged to use the CMake solution generation feature instead.

* New DRAFT (see NEWS for 4.2.0) socket options:
  - ZMQ_ROUTER_NOTIFY to deliver a notification when a peer connects and/or
    disconnects in the form of a routing id plus a zero-length frame.
  - ZMQ_MULTICAST_LOOP to control whether the data sent should be looped back
    on local listening sockets for UDP multicast sockets (ZMQ_RADIO).
  See doc/zmq_setsockopt.txt and doc/zmq_getsockopt.txt for details.

* New perf tool, perf/benchmark_radix_tree, to measure the performance of the
  different internal implementations of the trie algorithm used to track
  subscriptions. Requires a compiler that supports C++11.

* New autoconf flag "--enable-force-CXX98-compat" which will force -std=gnu++98
  and, if the compiler supports them (clang++ at the moment), it will also add
  -Wc++98-compat -Wc++98-compat-pedantic so that compatibility with C++98 can
  be tested.

* Many, many coding style, duplication and static analysis improvements.

* Many, many improvements to the CMake build system, especially on Windows.

* Many, many improvements to unit tests.

* Fixed #3036 - Compilation error when -pedantic is used.

* Fixed #3028 - Failure when zmq_poller_destroy is called after zmq_ctx_term.

* Fixed #2989 - CMake: Linker PDB install rule does not work when Visual Studio
                generators are used.

* Fixed #3045 - configure.ac: search for dladdr only when using libunwind.

* Fixed #3060 - REQ sockets terminate TCP connection after first heartbeat if
                ZMQ_HEARTBEAT_IVL is set.

* Fixed #2212 - UDP: need ability to specify bind address separately from
                multicast address for multi-homed hosts.

* Fixed #2891 - UDP: address name resolution is limited to dotted IPv4 rather
                than being capable of IPv4, IPv6, and hostname lookup.

* Fixed #3085 - autoconf/CMake getrandom test does not check if it's working but
                only for its presence.

* Fixed #3090 - compilation broken with Solaris Studio.

* Fixed #3094 - UDP: pass interface via IP[V6]_MULTICAST_IF if provided.

* Fixed #3061 - implement ZMTP 3.1 ping/pong context sending/receiving.

* Fixed #2188 - Added documentation for new zmq_poller API.

* Fixed #3088 - zmq_poller_add/zmq_poller_modify should reject invalid events
                arguments.

* Fixed #3042 - Fixed compilation on ARM with ZMQ_ATOMIC_PTR_MUTEX.

* Fixed #3107 - test_immediate_3/test_reconnect_inproc do not terminate with
                POLL as the I/O thread poller under Windows.

* Fixed #3046 - Aborts when iOS abuses EBADF to report a socket has been
                reclaimed.

* Fixed #3136 - Cannot set ZMQ_HEARTBEAT_TTL to more than 655.3 seconds.

* Fixed #3083 - link with -latomic when needed.

* Fixed #3162 - build failure with MUSL libc.

* Fixed #3158 - -1 value of ZMQ_RECONNECT_IVL was not correctly handled on some
                platforms.

* Fixed #3170 - improved documentation for ZMQ_PAIR.

* Fixed #3168 - correctly use symbols map on Debian/kFreeBSD and Debian/HURD
                to avoid exporting standard library symbols.

* Fixed #3168 - correctly process ZMTP 3.1 cancel/subscribe commands.

* Fixed #3171 - improve documentation for ZMQ_CONFLATE.

* Fixed #2876 - stack overflow on Windows 64.

* Fixed #3191 - race condition with received message causes
                ZMQ_CONNECT_ROUTING_ID to be assigned to wrong socket.

* Fixed #3005 - added documentation for new zmq_timers_* API.

* Fixed #3222 - use /Z7 debug on Release builds too on Windows (CMake).

* Fixed #3226 - possible PGM receiver crash.

* Fixed #3236 - UDP dish socket can't bind to a multicast port already in use.

* Fixed #3242 - improve HWM documentation.

* Fixed #2488 - improve zmq_msg_send doc return value documentation.

* Fixed #3268 - HWM in ZMQ_DGRAM socket does not respect multipart message.

* Fixed #3284 - added support for ZMQ_MULTICAST_HOPS with UDP sockets.

* Fixed #3245 - use-after-free reported in zmq::pipe_t::terminate.

* Fixed #1400 - use patricia trie for subscription to improve performances and
                memory usage. Note: only active in DRAFT builds for now.

* Fixed #3263 - fix abort on Windows when a large TCP read is requested and
                fails.

* Fixed #3312 - fix build on Android Things 1.06 with Termux.


0MQ version 4.2.5 stable, released on 2018/03/23
================================================

* Fixed #3018 - fix backward-incompatible change in the NULL auth
                mechanism that slipped in 4.2.3 and made connections
                with a ZAP domain set on a socket but without a working
                ZAP handler fail. See ZMQ_ZAP_ENFORCE_DOMAIN and RFC27.

* Fixed #3016 - clarify in zmq_close manpage that the operation will
                complete asynchronously.

* Fixed #3012 - fix CMake build problem when using LIBZMQ_WERROR and a
                compiler other than GCC.


0MQ version 4.2.4 stable, released on 2018/03/21
================================================

* New DRAFT (see NEWS for 4.2.0) socket options:
  - ZMQ_LOOPBACK_FASTPATH to enable faster TCP loopback on Windows
  - ZMQ_METADATA to set application-specific metadata on a socket
  See doc/zmq_setsockopt.txt and doc/zmq_getsockopt.txt for details.

* New DRAFT (see NEWS for 4.2.0) context options:
  - ZMQ_ZERO_COPY_RECV to disable zero-copy receive to save memory
    at the expense of slower performance
  See doc/zmq_ctx_set.txt and doc/zmq_ctx_get.txt for details.

* New DRAFT API zmq_stopwatch_intermediate which returns the time
  elapsed without stopping the stopwatch.

* TIPC: support addressing TIPC Port Identity addresses.

* Added CMake option to disable tests: BUILD_TESTS

* Added CMake and autotools make targets to support clang-formatter:
  make clang-format, clang-format-check and clang-format-diff to
  help developers make sure their code conforms to the style guidelines

* For distributors: a new test framework has been added, which
  includes a copy of the Unity source code. This source code library is
  distributed under the MIT license and thus is compatible with
  libzmq's LGPL3.

* Fixed #2867 - add ZeroMQConfig.cmake.in to distributable tarball

* Fixed #2868 - fix OpenBSD build

* Fixed #2870 - fix VC++ 11.0 (VS2012) build

* Fixed #2879 - prevent duplicate connections on PUB sockets

* Fixed #2872 - fix CMake tests on Windows

* Fixed #2895 - fix assert on Windows with POLL

* Fixed #2920 - fix Windows build with Intel compiler

* Fixed #2930 - use std::atomic when available with VC++ and VS2015

* Fixed #2910 - fix race condition with ZMQ_LINGER socket option

* Fixed #2927 - add support for ZMQ_XPUB_NODROP on ZMQ_RADIO

* Fixed #2820 - further clarify ZMQ_XPUB_VERBOSE(R) documentation.

* Fixed #2911 - ZMQ_DISH over UDP triggers errno_assert() after hitting
                watermark

* Fixed #2942 - ZMQ_PUB crash when due to high volume of subscribe and
                unsubscribe messages, an unmatched unsubscribe message is
                received in certain conditions

* Fixed #2946 - fix Windows CMake build when BUILD_SHARED is off

* Fixed #2960 - fix build with GCC 8

* Fixed #2967 - fix race condition on thread safe sockets due to pthread
                condvar timeouts on OSX

* Fixed #2977 - fix TIPC build-time availability check to be more relaxed

* Fixed #2966 - add support for WindRiver VxWorks 6.x

* Fixed #2963 - fix some PVS Studio static analysis warnings

* Fixed #2983 - fix MinGW cross-compilation

* Fixed #2991 - fix mutex assert at shutdown when the zmq context is part
                of a class declared as a global static


0MQ version 4.2.3 stable, released on 2017/12/13
================================================

* API change: previously ZMQ_POLLOUT on a ZMQ_ROUTER socket returned always
  true due to how the type works. When ZMQ_ROUTER_MANDATORY is set, sending
  fails when the peer is not available, but ZMQ_POLLOUT always returns true
  anyway, which does not make sense. Now when ZMQ_ROUTER_MANDATORY is set,
  ZMQ_POLLOUT on a ZMQ_ROUTER will return true only if at least one peer is
  available.
  Given ZMQ_POLLOUT with ZMQ_ROUTER was not usable at all previously, we do
  not consider this a breakage warranting a major or minor version increase.

* ZMQ_IDENTITY has been renamed to ZMQ_ROUTING_ID and ZMQ_CONNECT_RID has been
  renamed to ZMQ_CONNTECT_ROUTING_ID to disambiguate. ZMQ_IDENTITY and
  ZMQ_CONNECT_RID are still available to keep backward compatibility, and will
  be removed in a future release after further advance notice.

* DRAFT API change: zmq_poller_wait, zmq_poller_wait_all and zmq_poller_poll
  have been changed to be inline with other existing APIs that have a timeout
  to return EAGAIN instead of ETIMEDOUT as the errno value.
  See #2713 for details.

* Existing non-DRAFT socket types ZMQ_REP/REQ, ZMQ_ROUTER/DEALER and
  ZMQPUB/SUB, that were previously declared deprecated, have been reinstated
  as stable and supported. See #2699 for details.

* Tweetnacl: add support for, and use preferably if available, getrandom() as
  a simpler and less error-prone alternative to /dev/urandom on OSes where it
  is available (eg: Linux 3.18 with glibc 2.25).

* Curve: all remaining traces of debug output to console are now removed, and
  new DRAFT events are available to properly debug CURVE, PLAIN, GSSAPI and
  ZAP events and failures. See below for details on the new events.

* New DRAFT (see NEWS for 4.2.0) socket options:
  - ZMQ_GSSAPI_PRINCIPAL_NAMETYPE and ZMQ_GSSAPI_SERVICE_PRINCIPAL_NAMETYPE, for
    the corresponding GSSAPI features. Additional definitions for principal
    name types:
    - ZMQ_GSSAPI_NT_HOSTBASED
    - ZMQ_GSSAPI_NT_USER_NAME
    - ZMQ_GSSAPI_NT_KRB5_PRINCIPAL
    See doc/zmq_gssapi.txt for details.
  - ZMQ_BINDTODEVICE (Linux only), which will bind the socket(s) to the
    specified interface. Allows to use Linux VRF, see:
    https://www.kernel.org/doc/Documentation/networking/vrf.txt
    NOTE: requires the program to be ran as root OR with CAP_NET_RAW
  - ZMQ_ZAP_ENFORCE_DOMAIN, enables strict RFC 27 compatibility mode and makes
    the ZAP Domain mandatory when using security. See:
    https://rfc.zeromq.org/spec:27/ZAP
  See doc/zmq_setsockopt.txt and doc/zmq_getsockopt.txt for details.

* New DRAFT (see NEWS for 4.2.0) context options:
  - ZMQ_THREAD_AFFINITY_CPU_ADD and ZMQ_THREAD_AFFINITY_CPU_REMOVE (Posix only),
    to add and remove CPUs to the affinity set of the I/O threads. Useful to pin
    the background threads to specific CPUs.
  - ZMQ_THREAD_NAME_PREFIX (Posix only), to add a specific integer prefix to the
    background threads names, to easily identify them for debugging purposes.
  See doc/zmq_ctx_set.txt and doc/zmq_ctx_get.txt for details.

* New DRAFT (see NEWS for 4.2.0) message property name definitions to facilitate
  the use of zmq_msg_gets:
  - ZMQ_MSG_PROPERTY_ROUTING_ID
  - ZMQ_MSG_PROPERTY_SOCKET_TYPE
  - ZMQ_MSG_PROPERTY_USER_ID
  - ZMQ_MSG_PROPERTY_PEER_ADDRESS
  See doc/zmq_msg_gets.txt for details.

* New DRAFT (see NEWS for 4.2.0) API zmq_socket_get_peer_state, to be used to
  query the state of a specific peer (via routing-id) of a ZMQ_ROUTER socket.

* New DRAFT (see NEWS for 4.2.0) Socket Monitor events:
  - ZMQ_EVENT_HANDSHAKE_FAILED_NO_DETAIL, unknown system error and returns errno
  - ZMQ_EVENT_HANDSHAKE_SUCCEEDED, handshake was successful
  - ZMQ_EVENT_HANDSHAKE_FAILED_PROTOCOL, protocol errors between peers or server
    and ZAP handler. Returns one of ZMQ_PROTOCOL_ERROR_* - see manpage for list
  - ZMQ_EVENT_HANDSHAKE_FAILED_AUTH, failed authentication, returns ZAP status
  These events trigger when the ZMTP security mechanism handshake is
  completed or failed. See doc/zmq_socket_monitor.txt for more information.

* New DRAFT (see NEWS for 4.2.0) zmq_proxy_steerable command 'STATISTICS' to
  retrieve stats about the amount of messages and bytes sent and received by
  the proxy. See doc/zmq_proxy_steerable.txt for more information.

* Add new autoconf --disable-libunwind option to stop building with libunwind
  even if it is available.

* Add new autoconf --disable-Werror option to avoid building with the Werror
  flag.

* Use pkg-config as the first method for finding and building with external
  optional dependencies such as libnorm, libpgm and gssapi.

* On Posix platform where the feature is available, name the ZMQ background
  threads to simplify debugging: "ZMQbg/<num_thread>"

* Improve performance of zmq_poller_* (and zmq_poll and zmq_proxy when building
  with DRAFT APIs enabled).

* The TCP unit tests have been refactored to bind and connect to random ports
  rather than hard-coded ones, to allow running tests in parallel.
  There are 6 exceptions where it is necessary to use an hard-coded port to
  test specific code paths that would not be exercised when binding to a
  wildcard port. These are listed in tests/testutil.hpp so that distributions
  can easily patch them if they wish to and so that they can be unique across
  all the tests, allowing parallel runs.
  The IPC unit tests have been changed as well to use unique socket file names
  per test, where before there were some clashes.

* Fixed #2349 - fix building with libsodium when using CMake

* Fixed #2334 - do not assert when tuning socket options fails due to network
  errors, but simply retry again when connecting or send a socket monitor
  ZMQ_EVENT_ACCEPT_FAILED event when binding

* Fixed #2341 - fix source files path in VS2015 solution

* Fixed #2344 - Note that on Windows with VS2012 it is mandatory to increase
  the default stack size to at least 2MB

* Fixed #2348 - ZMQ_ROUTER send with ZMQ_ROUTER_MANDATORY can be stuck in case of
  network problem

* Fixed #2358 - occasional abort on zmq_connect on Windows

* Fixed #2370 - zmq_curve_keypair should return an error on failure rather
  than ignoring them and always returning 0

* Fixed #2452 - __STDC_LIMIT_MACROS before precompiled headers causes VC++
  warning

* Fixed #2457 - fix building with libsodium in Visual Studio solutions

* Fixed #2466 - add const qualifier to internal and public API that does not
  modify parameters

* Fixed #2471 - do more checks for OOM conditions when dynamic allocations is
  used

* Fixed #2476 - assertion causes abort after ZAP stop at shutdown

* Fixed #2479 - improve zmq_poller performance on Windows

* Fixed #2481 - potential memory leaks due to ZMTP handshake failures

* Fixed #2531 - ZMQ_GSSAPI_PRINCIPAL sockopt has no effect on client side

* Fixed #2535 - add BUILD_SHARED and BUILD_STATIC options to CMake, both on by
  default, to toggle shared and static library builds

* Fixed #2537 - use SYSTEM_CLOCK on OSX and CLOCK_MONOTONIC elsewhere for
  internal timers to avoid races

* Fixed #2540 - new zmq_poller used by zmq_poll without DRAFTs

* Fixed #2552 - Fix WITH_DOC CMake build to avoid checking for asciidoc if the
  option is disabled

* Fixed #2567 - Memory leak in REP socket handling

* Fixed #2579 - Compilation issue on Windows with CMake + ninja

* Fixed #2588 - SIGBUS under 64-bit SunOS Sparc

* Fixed #2590 - crash when using ZMQ_IMMEDIATE and ZMQ_LINGER to non-zero

* Fixed #2601 - XPUB_MANUAL subscriptions not removed on peer term

* Fixed #2602 - intermittent memory leak for ZMQ_REQ/REP send/recv

* Fixed #2608 - CURVE server (connect) fails when client rebinds

* Fixed #2610 - print backtraces in mutual exclusion to avoid mixing
  different traces

* Fixed #2621 - add missing CMake files to distributable tarball

* Fixed #2630 - improve compatibility with OpenBSD w.r.t. IPV6_V6ONLY

* Fixed #2638 - note in INSTALL that when using Windows builds on Linux with
  Wine it is necessary to increase the minimum TCP buffers

* Fixed #2632 - Fix file descriptor leak when using Tweetnacl (internal NACL
  implementation) instead of Libsodium, and fix race condition when using
  multiple ZMQ contexts with Tweetnacl

* Fixed #2681 - Possible buffer overflow in CURVE mechanism handshake.
  NOTE: this was protected by an assert previously, so there is no security
  risk.

* Fixed #2704 - test_sockopt_hwm fails occasionally on Windows

* Fixed #2701 - pgm build via cmake doesn't link libzmq with libpgm

* Fixed #2711 - ZAP handler communication errors should be handled consistently

* Fixed #2723 - assertion in src\select.cpp:111 or hang on zmq_ctx_destroy on
  Windows

* Fixed #2728 - fix support O_CLOEXEC when building with CMake

* Fixed #2761 - improve compatibility with TrueOS (FreeBSD 12)

* Fixed #2764 - do not unlink IPC socket files when closing a socket to avoid
  race conditions

* Fixed #2770 - support lcov 1.13 and newer

* Fixed #2787 - add libiphlpapi to PKGCFG_LIBS_PRIVATE for static mingw builds

* Fixed #2788 - document that adding -DZMQ_STATIC is required for Windows
  static builds with Mingw

* Fixed #2789 - description of zmq_atomic_counter_value return value is cloned
  from zmq_atomic_counter_new

* Fixed #2791 - fix building with DRAFT APIs on CentOS 6

* Fixed #2794 - router_t methods should not allocate memory for lookup in
  outpipes

* Fixed #2809 - optimize select() usage on Windows

* Fixed #2816 - add CMake and autoconf check for accept4, as it is not
  available on old Linux releases, and fallback to accept + FD_CLOEXEC

* Fixed #2824 - ZMQ_REQ socket does not report ZMQ_POLLOUT when ZMQ_REQ_RELAXED
  is set

* Fixed #2827 - add support for Haiku

* Fixed #2840 - fix building with VS2008

* Fixed #2845 - correct the ZMQ_LINGER documentation to accurately reflect that
  the default value is -1 (infinite). It never was 30 second in any released
  version, it was only changed briefly and then changed back, but the manpage
  was not reverted.

* Fixed #2861 - CMake/MSVC: export ZMQ_STATIC when needed.

0MQ version 4.2.2 stable, released on 2017/02/18
=============================================

* Improve compatibility with GNU Hurd

* Fixed #2286 - improve CMake on Windows documentation

* Fixed #1235 - improved compatibility with mingw64

* Improve zmq_proxy documentation to state it can return ETERM as well

* Fixed #1442 - SO_NOSIGPIPE and connection closing by peer race condition

* Improve CMake functionality on Windows: ZeroMQConfig.cmake generation CPack
  option, correct static library filename, ship FindSodium.cmake in tarball

* Fixed #2228 - setting HWM after connect on inproc transport leads to infinite
  HWM

* Add support for Visual Studio 2017

* New DRAFT (see NEWS for 4.2.0) zmq_has option "draft" option that returns
  true if the library was built with DRAFT enabled. Useful for FFI bindings.
  See doc/zmq_has.txt for more information

* Fixed #2321 - zmq_z85_decode does not validate its input. The function has
  been fixed to correctly follow RFC32 and return NULL if the input is invalid

* Fixed #2323 - clock_t related crash on Apple iOS 9.3.2 and 9.3.5

* Fixed #1801 - OSX: Cmake installs libzmq in a weird PATH

* Fixed potential divide by zero in zmq::lb_t::sendpipe

* Improve compatibility with OpenIndiana by skipping epoll and using poll/select

* Fix IPv4-in-IPv6 mapped addresses parsing error


0MQ version 4.2.1 stable, released on 2016/12/31
=============================================

* New DRAFT (see NEWS for 4.2.0) Socket Monitor events:
  - ZMQ_EVENT_HANDSHAKE_SUCCEED
  - ZMQ_EVENT_HANDSHAKE_FAILED
  These events trigger when the ZMTP security mechanism handshake is
  completed. See doc/zmq_socket_monitor.txt for more information.

* New DRAFT (see NEWS for 4.2.0) Context options:
  - ZMQ_MSG_T_SIZE
  See doc/zmq_ctx_get.txt for more information.

* Fixed #2268 - improved compatibility with mingw32

* Fixed #2254 - ZMQ_PUB compatibility with libzmq 2.x broken

* Fixed #2245 - added support for VS2017, Windows SDK 10.0.14393.0, toolset v141

* Fixed #2242 - file descriptors leaks on fork+exec

* Fixed #2239 - retired poller item crash from reaper thread

* Fixed #2234 - improved compatibility with AIX 7.1

* Fixed #2225 - cannot pick select for poller

* Fixed #2217 - CMake build uses library version as the ABI version

* Fixed #2208 - added support for ZMQ_TOS on IPv6

* Fixed #2200 - no documentation for ZMQ_SOCKS_PROXY

* Fixed #2199 - no documentation for zmq_curve_public

* Fixed #2196 - fixed build and runtime errors on kFreeBSD


0MQ version 4.2.0 stable, released on 2016/11/04
=============================================

* For Pieter. Thanks for making all of this possible.

  "Tell them I was a writer.
   A maker of software.
   A humanist. A father.
   And many things.
   But above all, a writer.
   Thank You. :)"
   - Pieter Hintjens

* This release introduces new APIs, but it is ABI compatible with
  libzmq 4.1.2 and up.

* Note for ARM and SPARC users: an alignment problem in zmq_msg_t that could in
  some cases and on some CPUs cause a SIGBUS error was solved, but it requires
  a rebuild of your application against the 4.2.0 version of include/zmq.h.
  To clarify, this change does not affect the internals of the library but only
  the public definition of zmq_msg_t, so there is no ABI incompatibility.

* Security with Curve is now available by default thanks to Tweetnacl sources:
  https://tweetnacl.cr.yp.to/index.html
  Libsodium is still fully supported but has to be enabled with the build flag
  --with-libsodium. Distribution and package maintainers are encouraged to use
  libsodium so that the security implementation can be audited and maintained
  separately.

* New Context options:
  - ZMQ_MAX_MSGSZ
  - ZMQ_BLOCKY
  See doc/zmq_ctx_set.txt and doc/zmq_ctx_get.txt for details.

* New Socket options:
  - ZMQ_HANDSHAKE_IVL
  - ZMQ_SOCKS_PROXY
  - ZMQ_XPUB_NODROP
  - ZMQ_XPUB_MANUAL
  - ZMQ_XPUB_WELCOME_MSG
  - ZMQ_STREAM_NOTIFY
  - ZMQ_INVERT_MATCHING
  - ZMQ_HEARTBEAT_IVL
  - ZMQ_HEARTBEAT_TTL
  - ZMQ_HEARTBEAT_TIMEOUT
  - ZMQ_XPUB_VERBOSER
  - ZMQ_CONNECT_TIMEOUT
  - ZMQ_TCP_MAXRT
  - ZMQ_THREAD_SAFE
  - ZMQ_MULTICAST_MAXTPDU
  - ZMQ_VMCI_BUFFER_SIZE
  - ZMQ_VMCI_BUFFER_MIN_SIZE
  - ZMQ_VMCI_BUFFER_MAX_SIZE
  - ZMQ_VMCI_CONNECT_TIMEOUT
  - ZMQ_USE_FD
  See doc/zmq_setsockopt.txt and doc/zmq_getsockopt.txt for details.

* New CURVE helper function to derive z85 public key from secret key:
    zmq_curve_public

* New cross-platform atomic counter helper functions:
    zmq_atomic_counter_new, zmq_atomic_counter_set, zmq_atomic_counter_inc,
    zmq_atomic_counter_dec, zmq_atomic_counter_value, zmq_atomic_counter_destroy
  See doc/zmq_atomic_*.txt for details.

* New DRAFT APIs early-release mechanism. New APIs will be introduced early
  in public releases, and until they are stabilized and guaranteed not to
  change anymore they will be unavailable unless the new build flag
  --enable-drafts is used. This will allow developers and early adopters to
  test new APIs before they are finalized.
  NOTE: as the name implies, NO GUARANTEE is made on the stability of these APIs.
  They might change or disappear entirely. Distributions are recommended NOT to
  build with them.

  New socket types have been introduced in DRAFT state:
    ZMQ_SERVER, ZMQ_CLIENT, ZMQ_RADIO, ZMQ_DISH, ZMQ_GATHER, ZMQ_SCATTER,
    ZMQ_DGRAM
  All these sockets are THREAD SAFE, unlike the existing socket types. They do
  NOT support multipart messages (ZMQ_SNDMORE/ZMQ_RCVMORE).
  ZMQ_RADIO, ZMQ_DISH and ZMQ_DGRAM also support UDP as transport,
  both unicast and multicast. See doc/zmq_udp.txt for more details.
  New methods to support the new socket types functionality:
    zmq_join, zmq_leave, zmq_msg_set_routing_id, zmq_msg_routing_id,
    zmq_msg_set_group, zmq_msg_group
  See doc/zmq_socket.txt for more details.

  New poller mechanism and APIs have been introduced in DRAFT state:
    zmq_poller_new, zmq_poller_destroy, zmq_poller_add, zmq_poller_modify,
    zmq_poller_remove, zmq_poller_wait, zmq_poller_wait_all, zmq_poller_add_fd
    zmq_poller_modify_fd, zmq_poller_remove_fd
  and a new supporting struct typedef: zmq_poller_event_t
  They support existing socket type, new thread-safe socket types and file
  descriptors (cross-platform).
  Documentation will be made available in the future before these APIs are declared
  stable.

  New cross-platform timers helper functions have been introduced in DRAFT state:
    zmq_timers_new, zmq_timers_destroy, zmq_timers_add, zmq_timers_cancel,
    zmq_timers_set_interval, zmq_timers_reset, zmq_timers_timeout,
    zmq_timers_execute
  and a new supporting callback typedef: zmq_timer_fn

* Many, many bug fixes. The most important fixes are backported and captured in the
  4.1.x and 4.0.x changelogs.


0MQ version 4.2.0 rc1, released on 2016/11/01
=============================================

* Many changes, see ChangeLog.


0MQ version 4.1.6 stable, released on 2016/11/01
================================================

* Fixed #2051 - getifaddrs can fail with ECONNREFUSED

* Fixed #2091 - testutil.hpp fails to build on Windows XP

* Fixed #2096 - add tests/CMakeLists.in and version.rc.in to dist tar

* Fixed #2107 - zmq_connect with IPv6 "source:port;dest:port" broken

* Fixed #2117 - ctx_term assert with inproc zmq_router connect-before-bind

* Fixed #2158 - Socket monitor uses internal Pair from multiple threads

* Fixed #2161 - messages dropped due to HWM race

* Fixed #1325 - alignment issue with zmq_msg_t causes SIGBUS on SPARC and ARM


0MQ version 4.1.5 stable, released on 2016/06/17
================================================

* Fixed #1673 - CMake on Windows put PDB in wrong directory.

* Fixed #1723 - Family is not set when resolving NIC on Android.

* Fixed #1608 - Windows 7 TCP slow start issue.

* Fixed #1806 - uninitialised read in curve getsockopt.

* Fixed #1807 - build broken with GCC 6.

* Fixed #1831 - potential assertion failure with latest libsodium.

* Fixed #1850 - detection issues with tweetnacl/libsodium.

* Fixed #1877 - Avoid terminating connections prematurely

* Fixed #1887 - zmq_bind IPv4 fallback still tries IPv6

* Fixed #1866 - fails to build on SunOS 5.10 / Solaris 10

* Fixed #919 - ZMQ_LINGER (related to #1877)

* Fixed #114 - cannot unbind with same endpoint with IPv6 enabled.

* Fixed #1952 - CMake scripts not part of release tarballs

* Fixed #1542 - Fix a crash on Windows when port 5905 is in use.

* Fixed #2021 - Fix building on sparc32.


0MQ version 4.1.4 stable, released on 2015/12/18
================================================

* Fixed #1315 - socket monitor hangs if bind/setsockopt failed.

* Fixed #1399 - assertion failure in tcp.cpp after network reconnect.

* Fixed #1632 - build failure using latest libsodium.

* Fixed #1644 - assertion failure in msg.cpp:390 on STREAM sockets.

* Fixed #1661 - does not handle IPv6 link local addresses.


0MQ version 4.1.3 stable, released on 2015/08/17
================================================

* Fixed #1532 - getsockopt ZMQ_RCVMORE now resets all bits instead of only 32

* Fixed #1445 - zmq::socket_base_t::connect fails on tcp ipv6 address


0MQ version 4.1.2 stable, released on 2015/06/15
================================================

* Added explicit reference to static link exception in every source file.

* Bumped ABI version to 5:0:0 since 4.1.x changed the ABI.

* Fixed STDINT event interface macros to work with CZMQ 3.0.

* Fixed installation of man pages when BUILD_DOC is not set.

* Fixed #1428 - regression on single-socket proxies.


0MQ version 4.1.1 stable, released on 2015/06/02
================================================

* Fixed #1208 - fix recursion in automake packaging.

* Fixed #1224 - crash when processing empty unsubscribe message.

* Fixed #1213 - properties files were missing from source packages.

* Fixed #1273 - V3 protocol handler vulnerable to downgrade attacks.

* Fixed #1347 - lack way to get peer address.

* Fixed #1362 - SUB socket sometimes fails to resubscribe properly.

* Fixed #1377, #1144 - failed with WSANOTINITIALISED in some cases.

* Fixed #1389 - PUB, PUSH sockets had slow memory leak.

* Fixed #1382 - zmq_proxy did not terminate if there were no readers.


0MQ version 4.1.0 rc1, released on 2014/10/14
=============================================

* All issues that were fixed in 4.0.x

* Improved client reconnection strategy on errors

* GSSAPI security mechanism

* SOCKS5 support (ZMQ_SOCKS_PROXY)

* ZMQ_ROUTER_HANDOVER

* ZMQ_TOS

* ZMQ_CONNECT_RID

* ZMQ_HANDSHAKE_IVL

* ZMQ_IDENTITY_FD

* ZMQ_XPUB_NODROP

* ZMQ_SRCFD and ZMQ_SHARED message options

* Message metadata -- zmq_msg_gets ()

* Probe library configuration -- zmq_has ()


0MQ version 4.0.8 stable, released on 2016/06/17
================================================

* Fixed LIBZMQ-949 - zmq_unbind fails for inproc and wildcard endpoints

* Fixed #1806 - uninitialised read in curve getsockopt.

* Fixed #1807 - build broken with GCC 6.

* Fixed #1877 - Avoid terminating connections prematurely

* Fixed #1887 - zmq_bind IPv4 fallback still tries IPv6

* Fixed #98 - don't require libssp without libsodium on Solaris

* Fixed #919 - ZMQ_LINGER (related to #1877)

* Fixed #139 - "tempnam" is deprecated.


0MQ version 4.0.7 stable, released on 2015/06/15
================================================

* Fixed #1428 - regression on single-socket proxies.


0MQ version 4.0.6 stable, released on 2015/06/02
================================================

* Fixed #1273 - V3 protocol handler vulnerable to downgrade attacks.

* Fixed #1362 - SUB socket sometimes fails to resubscribe properly.

* Fixed #1377, #1144 - failed with WSANOTINITIALISED in some cases.

* Fixed #1389 - PUB, PUSH sockets had slow memory leak.

* Fixed #1382 - zmq_proxy did not terminate if there were no readers.


0MQ version 4.0.5 stable, released on 2014/10/14
================================================

* Fixed #1191; CURVE mechanism does not verify short term nonces.

* Fixed #1190; stream_engine is vulnerable to downgrade attacks.

* Fixed #1088; assertion failure for WSAENOTSOCK on Windows.

* Fixed #1015; race condition while connecting inproc sockets.

* Fixed #994; bump so library number to 4.0.0

* Fixed #939, assertion failed: !more (fq.cpp:99) after many ZAP requests.

* Fixed #872; lost first part of message over inproc://.

* Fixed #797, keep-alive on Windows.


0MQ version 4.0.4 stable, released on 2014/03/10
================================================

Bug Fixes
---------

* Fixed #909; out of tree build issue on Linux.

* Fixed #888; hangs on terminate when inproc connected but never bound.

* Fixed #868; assertion failure at ip.cpp:137 when using port scanner.

* Fixed #818; fix timestamp counter on s390/s390x.

* Fixed #817; only export zmq_* symbols.

* Fixed #797; fixed setting TCP keepalive on Windows.

* Fixed #775; compile error on Windows.

* Fixed #763; when talking to a ZMTP v1 peer (libzmq 2.2), a socket would
  send an extra identity frame at the start of the connection.

* Fixed LIBZMQ-576 - Crash closing a socket after zmq_msg_send returns
  EAGAIN (reverts LIBZMQ-497)

* Fixed LIBZMQ-584; subscription filters getting lost on reconnection.


0MQ version 4.0.3 stable, released on 2013/11/24
================================================

Bug Fixes
---------

* Fixed test_many_sockets case, which failed when process socket limit
  was 1024.


0MQ version 4.0.2 stable, released on 2013/11/24
================================================

Bug Fixes
---------

* Fixed LIBZMQ-583 - improved low-res timer for Windows
* Fixed LIBZMQ-578 - z85_decode was extremely slow
* Fixed LIBZMQ-577 - fault in man pages.
* Fixed LIBZMQ-574 - assertion failure when ran out of system file handles
* Fixed LIBZMQ-571 - test_stream failing in some cases
* Fixed LIBZMQ-569 - Socket server crashes with random client data and when
  talking to 2.2 versions
* Fixed LIBZMQ-39 - Bad file descriptor during shutdown
* Pulled expected failing test_linger.cpp from release
* Reduced pause time in tests to allow "make check" to run faster


0MQ version 4.0.1 stable, released on 2013/10/08
================================================

Changes
-------

* Updated CURVE mechanism to track revised RFC 27 (INITIATE vouch).

  The INITIATE command vouch box is Box[C',S](C->S') instead of
  Box[C'](C->S), to reduce the risk of client impersonation, as per
  https://codesinchaos.wordpress.com/2012/09/09/curvecp-1/.

* Fixed LIBZMQ-567, adding abstract namespaces for IPC sockets on Linux.

  Converts an initial strudel or "at sign" (@) in the Unix socket path to
  a NULL character ('\0') indicating that the socket uses the abstract
  namespace instead of the filesystem namespace.  For instance, binding a
  socket to 'ipc://@/tmp/tester' will not create a file associated with
  the socket whereas binding to 'ipc:///tmp/tester' will create the file
  /tmp/tester. See issue 567 for more information.

* Added zmq_z85_encode and zmq_z85_decode to core libzmq API.

* Added zmq_curve_keypair to core libzmq API.

* Bumped library ABI version to 4:0:1.

Bug fixes
---------

* Fixed some build/test errors on OS/X + Clang++.

* Fixed LIBZMQ-565, typo in code.

* Fixed LIBZMQ-566, dealer-to-router connections sometimes failing.

* Fixed builds for AIX, MSVC 2008, OS/X with clang++, Solaris.

* Improved CURVE handshake error handling.


0MQ version 4.0.0 (RC1), released on 2013/09/20
===============================================

Major changes
-------------

* New wire level protocol, ZMTP/3.0, see http://rfc.zeromq.org/spec:23.
  Does not yet implement the SUBSCRIBE, CANCEL, PING, and PONG commands.
  
* New security framework, from plain user+password to strong encryption, 
  see section below. See http://hintjens.com/blog:49 for a tutorial.
  
* New ZMQ_STREAM socket type for working as a TCP client or server. See: 
  tests/test_stream.cpp.
  
Improvements
------------

* You can now connect to an inproc:// endpoint that does not already
  exist. This means inproc:// no longer needs careful set-up, but it may
  break code that relied on the old behaviour. See: 
  tests/test_inproc_connect.cpp.
 
* Libzmq now checks socket types at connection time, so that trying to 
  connect a 'wrong' socket type will fail.
  
* New zmq_ctx_shutdown API method will shutdown a context and send ETERM
  to blocking calls, without blocking. Use zmq_ctx_term to finalise the
  process.
  
* The regression test suite has been significantly extended and improved.
  
* Contexts can now be terminated in forked child processes. See: 
  tests/test_fork.cpp.
  
* zmq_disconnect now respects the linger setting on sockets.

* New zmq_send_const API method to send constant data (without copying).
  See: tests/test_inproc_connect.cpp.
  
* Added CMake support for static libraries.

* Added test cases for socket semantics as defined in RFCs 28, 29, 30, 31.
  See: tests/test_spec_*.cpp.

* New socket option, ZMQ_PROBE_ROUTER triggers an empty message on connect.
  See: tests/test_probe_router.cpp.
  
* New socket option, ZMQ_REQ_CORRELATE allows for correlation of replies 
  from a REP socket. See: tests/test_req_correlate.cpp.
  
* New socket option, ZMQ_REQ_RELAXED, lets you disable the state machine 
  on a REQ socket, so you can send multiple requests without waiting for 
  replies, and without getting an EFSM error. See: 
  tests/test_req_relaxed.cpp.
  
* New socket option, ZMQ_CONFLATE restricts the outgoing and incoming 
  socket buffers to a single message. See: tests/test_conflate.cpp.

Deprecated Options
------------------

* ZMQ_IPV4ONLY deprecated and renamed to ZMQ_IPV6 so that options are
  consistently "off" by default. 

* ZMQ_DELAY_ATTACH_ON_CONNECT deprecated, and renamed to ZMQ_IMMEDIATE.
  See: tests/test_immediate.cpp.

Security Framework
------------------

Based on new ZMTP wire level protocol that negotiates a security 
"mechanism" between client and server before exchanging any other data.

Security mechanisms are extensible. ZMTP defines three by default:

* NULL - classic ZeroMQ, with no authentication. See 
  http://rfc.zeromq.org/spec:23.
  
* PLAIN - plain-text username + password authentication. See
  http://rfc.zeromq.org/spec:24.

* CURVE - secure authentication and encryption based on elliptic curve 
  cryptography, using the Curve25519 algorithm from Daniel Bernstein and 
  based on CurveCP's security handshake. See http://rfc.zeromq.org/spec:25, 
  http://rfc.zeromq.org/spec:26, and http://curvecp.org.
  
Authentication is done by pluggable "authenticators" that connect to libzmq
over an inproc endpoint, see http://rfc.zeromq.org/spec:27.

Socket options to configure PLAIN security on client or server:

* ZMQ_PLAIN_SERVER, ZMQ_PLAIN_USERNAME, ZMQ_PLAIN_PASSWORD. See 
  tests/test_security_plain.
  
Socket options to configure CURVE security on client or server:

* ZMQ_CURVE_SERVER, ZMQ_CURVE_PUBLICKEY, ZMQ_CURVE_SECRETKEY, 
  ZMQ_CURVE_SERVERKEY. See tests/test_security_curve.cpp.
  
Socket options to configure "domain" for ZAP handler:
 
* ZMQ_ZAP_DOMAIN, see tests/test_security_null.cpp.

Support for encoding/decoding CURVE binary keys to ASCII:

* zmq_z85_encode, zmq_z85_decode.

Other issues addressed in this release
--------------------------------------

* LIBZMQ-525 Multipart upstreaming from XSUB to XPUB


0MQ version 3.2.4 stable, released on 2013/09/20
================================================

* LIBZMQ-84  (Windows) Assertion failed: Address already in use at signaler.cpp:80
* LIBZMQ-456 ZMQ_XPUB_VERBOSE does not propagate in a tree of XPUB/XSUB devices
* LIBZMQ-532 (Windows) critical section not released on error
* LIBZMQ-569 Detect OpenPGM 5.2 system library
* LIBZMQ-563 Subscribers sometimes stopped receiving messages (aka LIBZMQ-541)
* LIBZMQ-XXX Added support for Travis Continuous Integration
* LIBZMQ-XXX Several improvements to MSVC support


0MQ version 3.2.3 stable, released on 2013/05/02
================================================

Issues addressed in this release
--------------------------------

* LIBZMQ-526 Assertion failure "Invalid argument (tcp_connecter.cpp:285)"
* LIBZMQ-446 Setting the DSCP bits by default causes CAP_NET_ADMIN error
* LIBZMQ-496 Crash on heavy socket opening/closing: Device or resource busy (mutex.hpp:90)
* LIBZMQ-462 test_connect_delay fails at test_connect_delay.cpp:80
* LIBZMQ-497 Messages getting dropped
* LIBZMQ-488 signaler.cpp leaks the win32 Event Handle
* LIBZMQ-476 zmq_disconnect has no effect for inproc sockets
* LIBZMQ-475 zmq_disconnect does not sent unsubscribe messages


0MQ version 3.2.2 stable, released on 2012/11/23
================================================

Issues addressed in this release
--------------------------------

* LIBZMQ-384 No meta data for ZMQ_EVENT_DISCONNECTED monitor event
* LIBZMQ-414 Error in ARM/Thumb2 assembly (atomic_ptr.hpp)
* LIBZMQ-417 zmq_assert (!incomplete_in) in session_base.cpp 228
* LIBZMQ-447 socket_base_t::recv() packet loss and memory leak at high receiving rate
* LIBZMQ-448 Builds fail on older versions of GCC
* LIBZMQ-449 Builds fail on AIX
* LIBZMQ-450 lt-test_monitor: fails with assertion at test_monitor.cpp:81
* LIBZMQ-451 ZMQ_ROUTER_MANDATORY blocks forever
* LIBZMQ-452 test_connect_delay.cpp:175:12: error: 'sleep' was not declared in this scope
* LIBZMQ-458 lt-test_router_mandatory fails with assertion at test_router_mandatory.cpp:53
* LIBZMQ-459 Assertion failed: encoder (stream_engine.cpp:266
* LIBZMQ-464 PUB socket with HWM set leaks memory
* LIBZMQ-465 PUB/SUB results in 80-90% of CPU load
* LIBZMQ-468 ZMQ_XPUB_VERBOSE & unsubscribe
* LIBZMQ-472 Segfault in zmq_poll in REQ to ROUTER dialog


0MQ version 3.2.1 (RC2), released on 2012/10/15
===============================================

Issues addressed in this release
--------------------------------

* Fixed issue xxx - handle insufficient resources on accept() properly.
* Fixed issue 443 - added ZMQ_XPUB_VERBOSE setsocket option.
* Fixed issue 433 - ZeroMQ died on receiving EPIPE
* Fixed issue 423 - test_pair_tcp hangs
* Fixed issue 416 - socket_base: fix 'va_list' has not been declared error
* Fixed issue 409 - Pub-sub interoperability between 2.x and 3.x.
* Fixed issue 404 - zmq_term can not safely be re-entered with pgm transport
* Fixed issue 399 - zmq_ctx_set_monitor callback is not works properly
* Fixed issue 393 - libzmq does not build on Android (socklen_t signed comparison)
* Fixed issue 392 - Interaction with pyzmq on Android
* Fixed issue 389 - Assertion failure in mtrie.cpp:317
* Fixed issue 388 - tests/test_monitor.cpp has no newline at EOF (causes compile error)
* Fixed issue 387 - "sa_family_t sa_family;" in pgm_socket.cpp is unused variable
* Fixed issue 385 - Rework ZMQ_FAIL_UNROUTABLE socket option to actually work
* Fixed issue 382 - Current libzmq doesn't compile on Android NDK
* Fixed issue 377 - ZeroMQ will not build on Windows with OpenPGM
* Fixed issue 375 - error: unused variable 'sa_family'
* Fixed issue 373 - Unable to build libzmq/zeromq3.x on AIX7
* Fixed issue 372 - Unable to build libzmq/zeromq3.x on HPUX 11iv3
* Fixed issue 371 - Unable to build libzmq/zeromq3.x on RHEL5/SLES10
* Fixed issue 329 - wsa_error_to_errno() calls abort() on WSAEACCES
* Fixed issue 309 - Assertion failed: options.recv_identity (socket_base.cpp:864)
* Fixed issue 211 - Assertion failed: msg_->flags & ZMQ_MSG_MORE (rep.cpp:81)

API changes
-----------

* zmq_device () deprecated and replaced by zmq_proxy ().
* zmq_ctx_set_monitor () replaced by zmq_socket_monitor ().
* ZMQ_ROUTER_BEHAVIOR/ZMQ_FAIL_UNROUTABLE renamed experimentally to
  ZMQ_ROUTER_MANDATORY.


0MQ version 3.2.0 (RC1), released on 2012/06/05
===============================================

Bug fixes
---------

* Fixed issue 264 - Potential bug with linger, messages dropped during
  socket close.

* Fixed issue 293 - libzmq doesn't follow the ZMTP/1.0 spec (did not
  set reserved bits to 0).

* Fixed issue 303 - Assertion failure in pgm_sender.cpp:102.

* Fixed issue 320 - Assertion failure in connect_session.cpp:96 when
  connecting epgm to an invalid endpoint.

* Fixed issue 325 - Assertion failure in xrep.cpp:93, when two sockets
  connect using the same identity.

* Fixed issue 327 - Assertion failure in mtrie.cpp:246, when
  unsubscribing from channel.

* Fixed issue 346 - Assertion failure in signaler.cpp:155, when using a
  closed socket.

* Fixed issue 328 - unsubscribe wrongly clears multiple subscriptions.

* Fixed issue 330 - IPC listener does not remove unix domain stream file
  when terminated.

* Fixed issue 334 - Memory leak in session_base.cpp:59.

* Fixed issue 369 - ROUTER cannot close/reopen while DEALER connected.

Operating systems
-----------------

* Fixed issue 301 - HPUX 11iv2 - build fails, CLOCK_MONOTONIC
  undefined.

* Fixed issue 324 - OS/X - build fails, ECANTROUTE undefined.

* Fixed issue 368 - Solaris / Sun C++ - build fails, no insert method
  in multimap classes.

* Fixed issue 366 - Windows - ports not freed after crash.

* Fixed issue 355 - Windows - build fails, MSVC solution file is out of
  date.

* Fixed issue 331 - FreeBSD 8 and 9 - getaddrinfo fails with
  EAI_BADFLAGS on AI_V4MAPPED flag.

* Fixed issue xxx - Added support for WinCE.

Performance
-----------

* Fixed issue xxx - Implemented atomic operations for ARMv7a (runs 15-20% faster).

API changes
-----------

* Fixed issue 337 - Cleaned-up context API:

    zmq_ctx_new() - create new context (will deprecate zmq_init)
    zmq_ctx_destroy() - destroy context (will deprecate zmq_term)
    zmq_ctx_set() - set context property
    zmq_ctx_get() - get context property

* Fixed issue xxx - Cleaned-up message API:

    zmq_msg_send() - send a message (will deprecate zmq_sendmsg)
    zmq_msg_recv() - receive a message (will deprecate zmq_recvmsg)
    zmq_msg_more() - indicate whether this is final part of message
    zmq_msg_get() - get message property
    zmq_msg_set() - set message property

* Fixed issue xxx - Added context monitoring API:

    zmq_ctx_set_monitor() - configure monitor callback.

* Fixed issue xxx - Added unbind/disconnect API:

    zmq_unbind() - unbind socket.
    zmq_disconnect() - disconnect socket.

* Fixed issue xxx - Added ZMQ_TCP_ACCEPT_FILTER setsockopt() for listening TCP sockets.

* Fixed issue 336 - Removed sys: transport.

* Fixed issue 333 - Added zmq_device function back to API (was removed
  in 3.0).

* Fixed issue 340 - Add support for MAX_SOCKETS to new context API.


OMQ version 3.1.0 (beta), released on 2011/12/18
================================================

General information
-------------------

Based on community consensus, the 0MQ 3.1.x release reverts a number of
features introduced in version 3.0. The major reason for these changes is
improving backward compatibility with 0MQ 2.1.x.

Development of the 0MQ 3.0.x series will be discontinued, and users are
encouraged to upgrade to 3.1.

The 0MQ 3.1.x releases use ABI version 3.

Reverted functionality
----------------------

The following functionality present in 0MQ 3.0 has been reverted:

* Wire format changes. The 0MQ 3.1 wire format is identical to that of 0MQ
  2.1.

* LABELs and COMMANDs have been removed.

* Explicit identies are re-introduced, however they can be used only for
  explicit routing, not for durable sockets.

* The ZMQ_ROUTER and ZMQ_DEALER socket types are once again aliases for
  ZMQ_XREQ and ZMQ_XREP.

New functionality
-----------------

* The zmq_getmsgopt() function has been introduced.

* Experimental IPv6 support has been introduced. This is disabled by
  default, see the zmq_setsockopt() documentation for enabling it.

Other changes
-------------

* The default HWM for all socket types has been set to 1000.

* Many bug fixes.

Building
--------

* The dependency on libuuid has been removed.

* Support for building on Android, and with MSVC 10 has been added.

0MQ version 3.0.0 (alpha), released on 2011/07/12
=================================================

New functionality
-----------------

* A zmq_ctx_set_monitor() API to register a callback / event sink for changes
  in socket state.

* POSIX-compliant zmq_send and zmq_recv introduced (uses raw buffer
  instead of message object).

* ZMQ_MULTICAST_HOPS socket option added. Sets the appropriate field in
  IP headers of PGM packets.

* Subscription forwarding. Instead of filtering on consumer, the
  subscription is moved as far as possible towards the publisher and
  filtering is done there.

* ZMQ_XPUB, ZMQ_XSUB introduced. Allow to create subscription-
  forwarding-friendly intermediate devices.

* Add sockopt ZMQ_RCVTIMEO/ZMQ_SNDTIMEO. Allow to set timeout for
  blocking send/recv calls.

* A new LABEL flag was added to the wire format. The flag distinguishes
  message parts used by 0MQ (labels) from user payload message parts.

* There is a new wire format for the REQ/REP pattern. First, the empty
  bottom-of-the-stack message part is not needed any more, the LABEL
  flag is used instead. Secondly, peer IDs are 32-bit integers rather
  than 17-byte UUIDs.

* The REQ socket now drops duplicate replies.

* Outstanding requests & replies associated with a client are dropped
  when the clients dies. This is a performance optimisation.

* Introduced ZMQ_ROUTER and ZMQ_DEALER sockets. These mimic the
  functionality of ZMQ_ROUTER and ZMQ_DEALER in 0MQ/2.1.x. Guarantees
  backward compatibility for exsiting code.

* Removed dependency on OS socketpair buffer size. No more asserts in
  mailbox.cpp because of low system limit of sockepair buffer size.

API improvements
----------------

* Obsolete constants ZMQ_UPSTREAM and ZMQ_DOWNSTREAM removed. Use
  ZMQ_PUSH and ZMQ_PULL instead.

* Timeout in zmq_poll is in milliseconds instead of microseconds. This
  makes zmq_poll() compliant with POSIX poll()

* ZMQ_MCAST_LOOP removed. There's no support for multicast over
  loopback any more. Use IPC or TCP isntead.

* zmq_send/zmq_recv was renamed zmq_sendmsg/zmq_recvmsg.

* ZMQ_RECOVERY_IVL and ZMQ_RECOVERY_IVL_MSEC reconciled. The new option
  is named ZMQ_RECOVERY_IVL and the unit is milliseconds.

* Option types changed. Most of the numeric types are now represented
  as 'int'.

* ZMQ_HWM split into ZMQ_SNDHWM and ZMQ_RCVHWM. This makes it possible
  to control message flow separately for each direction.

* ZMQ_NOBLOCK renamed ZMQ_DONTWAIT. That makes it POSIX-compliant.

Less is More
------------

* Pre-built devices and zmq_device() removed. Should be made available
  as a separate project(s).

* ZMQ_SWAP removed. Writing data to disk should be done on top of 0MQ,
  on inside it.

* C++ binding removed from the core. Now it's a separate project, same
  as any other binding.

Bug fixes
---------

* Many.

Building
--------

* Make pkg-config dependency conditional.

Distribution
------------

* Removed Debian packaging, which is now available at packages.debian.org
  or via apt-get.


0MQ version 2.2.0 (Stable), released on 2012/04/04
==================================================

Changes
-------

* Fixed issue 349, add send/recv timeout socket options.

Bug fixes
---------

* Fixed issue 301, fix builds on HP-UX 11iv3 when using either gcc or aCC.

* Fixed issue 305, memory leakage when using dynamic subscriptions.

* Fixed issue 332, libzmq doesn't compile on Android NDK.

* Fixed issue 293, libzmq doesn't follow ZMTP/1.0 spec.

* Fixed issue 342, cannot build against zmq.hpp under C++11.


0MQ version 2.1.11 (Stable), released on 2011/12/18
===================================================

Bug fixes
---------

* Fixed issue 290, zmq_poll was using system time instead of monotonic
  clock (Mika Fischer).

* Fixed issue 281, crash on heavy socket creation - assertion failure in
  mutex.hpp:91. (Mika Fischer).

* Fixed issue 273, O_CLOEXEC flag used in ip.cpp:192 is supported only
  on Linux kernels 2.6.27+

* Fixed issue 261, assertion failure in kqueue.cpp:76.

* Fixed issue 269, faulty diagnostic code in 2.1.10.

* Fixed issue 254, assertion failure at tcp_socket.cpp:229 on ENOTCONN.

Changes
-------

* Now builds properly on AIX 6.1 (AJ Lewis).

* Builds using libdcekt on HP-UX (AJ Lewis).

* New upstream OpenPGM maintenance release 5.1.118.

* Enabled debugging on assertion failure on Windows (Paul Betts).


0MQ version 2.1.10 (Stable), released on 2011/10/03
===================================================

Bug fixes
---------

* Fixed issue 140, SWAP failed with assertion failure in pipe.cpp:187
  if the current directory was not writeable. Behavior now is to return
  -1 at zmq_setsockopt in this situation.

* Fixed issue 207, assertion failure in zmq_connecter.cpp:48, when an
  invalid zmq_connect() string was used, or the hostname could not be
  resolved. The zmq_connect() call now returns -1 in both those cases.

* Fixed issue 218, sockets not opened with SOCK_CLOEXEC, causing fork/exec
  to sit on sockets unnecessarily.

* Fixed issue 250, build errors on Windows (Mikko Koppanen).

* Fixed issue 252, assertion failure in req.cpp:87 and req.cpp:88 (Mikko
  Koppanen).


0MQ version 2.1.9 (Stable), released on 2011/08/29
==================================================

Bug fixes
---------

* Fixed issue 240, assertion failure in pgm_socket.cpp:437.

* Fixed issue 238, assertion failure in zmq.cpp:655, when zmq_poll is
  used on an empty set, on Windows.

* Fixed issue 239, assertion failure in zmq.cpp:223, when ZMQ_SWAP was
  used with explicit identities and multiple SUB sockets.

* Fixed issue 236, zmq_send() and zmq_recv() did not always return
  error conditions such as EFSM properly. This bug was introduced in
  version 2.1.8 by the backport of changes for issue 231.

Building
--------

* 0MQ support for Android added (Bill Roberts, Mikko Koppanen).


0MQ version 2.1.8 (RC), released on 2011/07/28
==============================================

Bug fixes
---------

* Fixed issue 223, assertion failure in tcp_connecter.cpp:300 when
  connecting to a server that is on an unreachable network (errno is
  equal to ENETUNREACH).

* Fixed issue 228, assertion failure at rep.cpp:88 when HWM was reached.

* Fixed issue 231, assertion failure at mailbox.cpp:183 when too many
  pending socketpair operations were queued (major backport from 3.0).

* Fixed issue 234, assertion failure at mailbox.cpp:77 when Ctrl-C was
  used (only affected git master following backport for 231).

* Fixed issue 230, SIGPIPE killing servers when client disconnected, hit
  OS/X only.

Note: this release was renamed "release candidate" due to issue 236,
fixed in 2.1.9.


0MQ version 2.1.7 (Stable), released on 2011/05/12
==================================================

Bug fixes
---------

* Fixed issue 188, assert when closing socket that had unread multipart
  data still on it (affected PULL, SUB, ROUTER, and DEALER sockets).

* Fixed issue 191, message atomicity issue with PUB sockets (an old issue).

* Fixed issue 199 (affected ROUTER/XREP sockets, an old issue).

* Fixed issue 206, assertion failure in zmq.cpp:223, affected all sockets
  (bug was introduced in 2.1.6 as part of message validity checking).

* Fixed issue 211, REP socket asserted if sent malformed envelope (old issue
  due to abuse of assertions for error checking).

* Fixed issue 212, reconnect failing after resume from sleep on Windows
  (due to not handling WSAENETDOWN).

* Properly handle WSAENETUNREACH on Windows (e.g. if client connects
  before server binds).

* Fixed memory leak with threads on Windows.

Changes
-------

* Checks zmq_msg_t validity at each operation.

* Inproc performance tests now work on Windows.

* PGM wire format specification improved in zmq_pgm(7)

* Added thread latency/throughput performance examples.

* Added "--with-system-pgm" configure option to use already installed
  OpenPGM.

* Runtime checking of socket and context validity, to catch e.g. using a
  socket after closing it, or passing an invalid pointer to context/socket
  methods.

* Test cases moved off port 5555, which conflicts with other services.

* Clarified zmq_poll man page that the resolution of the timeout is 1msec.


0MQ version 2.1.6 (Broken), released on 2011/04/26
==================================================

Note that this version contained a malformed patch and is not usable.
It is not available for download, but is available in the git via the
2.1.6 tag.

0MQ version 2.1.5 (Broken), released on 2011/04/20
==================================================

Note that this version contained a malformed patch and is not usable.
It is not available for download, but is available in the git via the
2.1.5 tag.


0MQ version 2.1.4 (Stable), released on 2011/03/30
==================================================

Bug fixes
---------

* Fix to OpenPGM which was asserting on small messages (Steven McCoy).

Changes
-------

* Upgraded OpenPGM to version 5.1.115 (Pieter Hintjens).

* OpenPGM build changed to not install OpenPGM artifacts.


0MQ version 2.1.3 (Stable), released on 2011/03/21
==================================================

Bug fixes
---------

* Fix to PUSH sockets, which would sometimes deliver tail frames of a
  multipart message to new subscribers (Martin Sustrik).

* Fix to PUB sockets, which would sometimes deliver tail frames of a
  multipart message to new subscribers (Martin Sustrik).

* Windows build was broken due to EPROTONOSUPPORT not being defined. This
  has now been fixed (Martin Sustrik).

* Various fixes to make OpenVMS port work (Brett Cameron).

* Corrected Reference Manual to note that ZMQ_LINGER socket option may be
  set at any time, not just before connecting/binding (Pieter Hintjens).

* Fix to C++ binding to properly close sockets (Guido Goldstein).

* Removed obsolete assert from pgm_socket.cpp (Martin Sustrik).

Changes
-------

* Removed stand-alone devices (/devices subdirectory) from distribution.
  These undocumented programs remain available in older packages (Pieter
  Hintjens).

* OpenPGM default rate raised to 40mbps by default (Steven McCoy).

* ZMQ_DEALER and ZMQ_ROUTER macros provided to ease upgrade to 0MQ/3.0.
  These are scheduled to replace ZMQ_XREQ and ZMQ_XREP (Pieter Hintjens).

* Added man page for zmq_device(3) which was hereto undocumented (Pieter
  Hintjens).

* Removed zmq_queue(3), zmq_forwarder(3), zmq_streamer(3) man pages
  (Pieter Hintjens).

OpenPGM Integration
-------------------

* Upgraded OpenPGM to version 5.1.114 (Steven McCoy, Mikko Koppanen).

* Build system now calls OpenPGM build process directly, allowing easier
  future upgrades of OpenPGM (Mikko Koppanen).

* Build system allows configuration with arbitrary versions of OpenPGM
  (./configure --with-pgm=libpgm-x.y.z) (Mikko Koppanen).

* OpenPGM uses new PGM_ODATA_MAX_RTE controlling original data instead of
  PGM_TXW_MAX_RTE covering entire channel (Steven McCoy).

Building
--------

* 0MQ builds properly on FreeBSD (Mikko Koppanen).


0MQ version 2.1.2 (rc2), released on 2011/03/06
===============================================

Bug fixes
---------

* 0MQ now correctly handles durable inproc sockets; previously it ignored
  explicit identities on inproc sockets.

* Various memory leaks were fixed.

* OpenPGM sender/receiver creation fixed.


0MQ version 2.1.1 (rc1), released on 2011/02/23
===============================================

New functionality
-----------------

* New socket option ZMQ_RECONNECT_IVL_MAX added, allows for exponential
  back-off strategy when reconnecting.

* New socket option ZMQ_RECOVERY_IVL_MSEC added, as a fine-grained
  counterpart to ZMQ_RECOVERY_IVL (for multicast transports).

* If memory is exhausted, 0MQ warns with an explicit message before
  aborting the process.

* Size of inproc HWM and SWAP is sum of peers' HWMs and SWAPs (Douglas
  Greager, Martin Sustrik).

Bug fixes
---------

* 0MQ no longer asserts in mailbox.cpp when multiple peers connect with
  the same identity.

* 0MQ no longer asserts when rejecting an oversized message.

* 0MQ no longer asserts in pipe.cpp when the swap fills up.

* zmq_poll now works correctly with an empty poll set.

* Many more.

Building
--------

* 0MQ now builds correctly on CentOS, Debian 6, and SunOS/gcc3.

* Added WithOpenPGM configuration into MSVC builds.

Known issues
------------

* OpenPGM integration is still not fully stable.


0MQ version 2.1.0 (Beta), released on 2010/12/01
================================================

New functionality
-----------------

* New semantics for zmq_close () and zmq_term () ensure that all messages
  are sent before the application terminates. This behaviour may be
  modified using the new ZMQ_LINGER socket option; for further details
  refer to the reference manual.

* The new socket options ZMQ_FD and ZMQ_EVENTS provide a way to integrate
  0MQ sockets into existing poll/event loops.

* Sockets may now be migrated between OS threads, as long as the
  application ensures that a full memory barrier is issued.

* The 0MQ ABI exported by libzmq.so has been formalised; DSO symbol
  visibility is used on supported platforms to ensure that only public ABI
  symbols are exported. The library ABI version has been set to 1.0.0 for
  this release.

* OpenPGM has been updated to version 5.0.92. This version no longer
  depends on GLIB, and integration with 0MQ should be much improved.

* zmq_poll() now honors timeouts precisely, and no longer returns if no
  events are signaled.

* Blocking calls now return EINTR if interrupted by the delivery of a
  signal; this also means that language bindings which previously had
  problems with handling SIGINT/^C should now work correctly.

* The ZMQ_TYPE socket option was added; this allows retrieval of the socket
  type after creation.

* Added a ZMQ_VERSION macro to zmq.h for compile-time API version
  detection.

* The ZMQ_RECONNECT_IVL and ZMQ_BACKLOG socket options have been added.

Bug fixes
---------

* Forwarder and streamer devices now handle multi-part messages correctly.

* 0MQ no longer asserts when malformed data is received on the wire.

* 0MQ internal timers now work correctly if the TSC jumps backwards.

* The internal signalling functionality (mailbox) has been improved
  to automatically resize socket buffers on POSIX systems.

* Many more.

Building
--------

* 0MQ now builds correctly with many more non-GCC compilers (Sun Studio,
  Intel ICC, CLang).

* AIX and HP-UX builds should work now.

* FD_SETSIZE has been set to 1024 by default for MSVC builds.

* Windows builds using GCC (MinGW) now work out of the box.

Distribution
------------

* A simple framework for regression tests has been added, along with a few
  basic self-tests. The tests can be run using "make check".
